// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

#include "tensorflow/core/util/saved_tensor_slice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorflow {
constexpr SavedSliceMeta::SavedSliceMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slice_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_(nullptr)
  , type_(0)
{}
struct SavedSliceMetaDefaultTypeInternal {
  constexpr SavedSliceMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedSliceMetaDefaultTypeInternal() {}
  union {
    SavedSliceMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedSliceMetaDefaultTypeInternal _SavedSliceMeta_default_instance_;
constexpr SavedTensorSliceMeta::SavedTensorSliceMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensor_(){}
struct SavedTensorSliceMetaDefaultTypeInternal {
  constexpr SavedTensorSliceMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedTensorSliceMetaDefaultTypeInternal() {}
  union {
    SavedTensorSliceMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedTensorSliceMetaDefaultTypeInternal _SavedTensorSliceMeta_default_instance_;
constexpr SavedSlice::SavedSlice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_(nullptr)
  , data_(nullptr){}
struct SavedSliceDefaultTypeInternal {
  constexpr SavedSliceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedSliceDefaultTypeInternal() {}
  union {
    SavedSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedSliceDefaultTypeInternal _SavedSlice_default_instance_;
constexpr SavedTensorSlices::SavedTensorSlices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(nullptr)
  , data_(nullptr){}
struct SavedTensorSlicesDefaultTypeInternal {
  constexpr SavedTensorSlicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavedTensorSlicesDefaultTypeInternal() {}
  union {
    SavedTensorSlices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavedTensorSlicesDefaultTypeInternal _SavedTensorSlices_default_instance_;
}  // namespace tensorflow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, slice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, slice_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, meta_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::SavedSliceMeta)},
  { 9, -1, sizeof(::tensorflow::SavedTensorSliceMeta)},
  { 15, -1, sizeof(::tensorflow::SavedSlice)},
  { 23, -1, sizeof(::tensorflow::SavedTensorSlices)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedSliceMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedTensorSliceMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedTensorSlices_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/util/saved_tensor_slic"
  "e.proto\022\ntensorflow\032,tensorflow/core/fra"
  "mework/tensor_shape.proto\032,tensorflow/co"
  "re/framework/tensor_slice.proto\032&tensorf"
  "low/core/framework/tensor.proto\032%tensorf"
  "low/core/framework/types.proto\"\234\001\n\016Saved"
  "SliceMeta\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\0132\034"
  ".tensorflow.TensorShapeProto\022\"\n\004type\030\003 \001"
  "(\0162\024.tensorflow.DataType\022+\n\005slice\030\004 \003(\0132"
  "\034.tensorflow.TensorSliceProto\"B\n\024SavedTe"
  "nsorSliceMeta\022*\n\006tensor\030\001 \003(\0132\032.tensorfl"
  "ow.SavedSliceMeta\"n\n\nSavedSlice\022\014\n\004name\030"
  "\001 \001(\t\022+\n\005slice\030\002 \001(\0132\034.tensorflow.Tensor"
  "SliceProto\022%\n\004data\030\003 \001(\0132\027.tensorflow.Te"
  "nsorProto\"i\n\021SavedTensorSlices\022.\n\004meta\030\001"
  " \001(\0132 .tensorflow.SavedTensorSliceMeta\022$"
  "\n\004data\030\002 \001(\0132\026.tensorflow.SavedSliceb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps[4] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = {
  false, false, 684, descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, "tensorflow/core/util/saved_tensor_slice.proto", 
  &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once, descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto(&descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto);
namespace tensorflow {

// ===================================================================

class SavedSliceMeta::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const SavedSliceMeta* msg);
};

const ::tensorflow::TensorShapeProto&
SavedSliceMeta::_Internal::shape(const SavedSliceMeta* msg) {
  return *msg->shape_;
}
void SavedSliceMeta::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
void SavedSliceMeta::clear_slice() {
  slice_.Clear();
}
SavedSliceMeta::SavedSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slice_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSliceMeta)
}
SavedSliceMeta::SavedSliceMeta(const SavedSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slice_(from.slice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSliceMeta)
}

void SavedSliceMeta::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(type_));
}

SavedSliceMeta::~SavedSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSliceMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void SavedSliceMeta::ArenaDtor(void* object) {
  SavedSliceMeta* _this = reinterpret_cast< SavedSliceMeta* >(object);
  (void)_this;
}
void SavedSliceMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedSliceMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedSliceMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SavedSliceMeta.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorSliceProto slice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedSliceMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_slice(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSliceMeta)
  return target;
}

size_t SavedSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSliceMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorSliceProto slice = 4;
  total_size += 1UL * this->_internal_slice_size();
  for (const auto& msg : this->slice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedSliceMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedSliceMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedSliceMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSliceMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSliceMeta)
    MergeFrom(*source);
  }
}

void SavedSliceMeta::MergeFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slice_.MergeFrom(from.slice_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SavedSliceMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSliceMeta::CopyFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSliceMeta::IsInitialized() const {
  return true;
}

void SavedSliceMeta::InternalSwap(SavedSliceMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slice_.InternalSwap(&other->slice_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedSliceMeta, type_)
      + sizeof(SavedSliceMeta::type_)
      - PROTOBUF_FIELD_OFFSET(SavedSliceMeta, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSliceMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[0]);
}

// ===================================================================

class SavedTensorSliceMeta::_Internal {
 public:
};

SavedTensorSliceMeta::SavedTensorSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSliceMeta)
}
SavedTensorSliceMeta::SavedTensorSliceMeta(const SavedTensorSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSliceMeta)
}

void SavedTensorSliceMeta::SharedCtor() {
}

SavedTensorSliceMeta::~SavedTensorSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSliceMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedTensorSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SavedTensorSliceMeta::ArenaDtor(void* object) {
  SavedTensorSliceMeta* _this = reinterpret_cast< SavedTensorSliceMeta* >(object);
  (void)_this;
}
void SavedTensorSliceMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedTensorSliceMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedTensorSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedTensorSliceMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.SavedSliceMeta tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedTensorSliceMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSliceMeta)
  return target;
}

size_t SavedTensorSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSliceMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTensorSliceMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedTensorSliceMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedTensorSliceMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSliceMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSliceMeta)
    MergeFrom(*source);
  }
}

void SavedTensorSliceMeta::MergeFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_.MergeFrom(from.tensor_);
}

void SavedTensorSliceMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSliceMeta::CopyFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSliceMeta::IsInitialized() const {
  return true;
}

void SavedTensorSliceMeta::InternalSwap(SavedTensorSliceMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensor_.InternalSwap(&other->tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSliceMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[1]);
}

// ===================================================================

class SavedSlice::_Internal {
 public:
  static const ::tensorflow::TensorSliceProto& slice(const SavedSlice* msg);
  static const ::tensorflow::TensorProto& data(const SavedSlice* msg);
};

const ::tensorflow::TensorSliceProto&
SavedSlice::_Internal::slice(const SavedSlice* msg) {
  return *msg->slice_;
}
const ::tensorflow::TensorProto&
SavedSlice::_Internal::data(const SavedSlice* msg) {
  return *msg->data_;
}
void SavedSlice::clear_slice() {
  if (GetArena() == nullptr && slice_ != nullptr) {
    delete slice_;
  }
  slice_ = nullptr;
}
void SavedSlice::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
SavedSlice::SavedSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSlice)
}
SavedSlice::SavedSlice(const SavedSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_slice()) {
    slice_ = new ::tensorflow::TensorSliceProto(*from.slice_);
  } else {
    slice_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::tensorflow::TensorProto(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSlice)
}

void SavedSlice::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slice_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&slice_)) + sizeof(data_));
}

SavedSlice::~SavedSlice() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slice_;
  if (this != internal_default_instance()) delete data_;
}

void SavedSlice::ArenaDtor(void* object) {
  SavedSlice* _this = reinterpret_cast< SavedSlice* >(object);
  (void)_this;
}
void SavedSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && slice_ != nullptr) {
    delete slice_;
  }
  slice_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.SavedSlice.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorSliceProto slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slice(this), target, stream);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSlice)
  return target;
}

size_t SavedSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slice_);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSlice)
    MergeFrom(*source);
  }
}

void SavedSlice::MergeFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_slice()) {
    _internal_mutable_slice()->::tensorflow::TensorSliceProto::MergeFrom(from._internal_slice());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::tensorflow::TensorProto::MergeFrom(from._internal_data());
  }
}

void SavedSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSlice::CopyFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSlice::IsInitialized() const {
  return true;
}

void SavedSlice::InternalSwap(SavedSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedSlice, data_)
      + sizeof(SavedSlice::data_)
      - PROTOBUF_FIELD_OFFSET(SavedSlice, slice_)>(
          reinterpret_cast<char*>(&slice_),
          reinterpret_cast<char*>(&other->slice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSlice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[2]);
}

// ===================================================================

class SavedTensorSlices::_Internal {
 public:
  static const ::tensorflow::SavedTensorSliceMeta& meta(const SavedTensorSlices* msg);
  static const ::tensorflow::SavedSlice& data(const SavedTensorSlices* msg);
};

const ::tensorflow::SavedTensorSliceMeta&
SavedTensorSlices::_Internal::meta(const SavedTensorSlices* msg) {
  return *msg->meta_;
}
const ::tensorflow::SavedSlice&
SavedTensorSlices::_Internal::data(const SavedTensorSlices* msg) {
  return *msg->data_;
}
SavedTensorSlices::SavedTensorSlices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSlices)
}
SavedTensorSlices::SavedTensorSlices(const SavedTensorSlices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::tensorflow::SavedTensorSliceMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::tensorflow::SavedSlice(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSlices)
}

void SavedTensorSlices::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(data_));
}

SavedTensorSlices::~SavedTensorSlices() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSlices)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavedTensorSlices::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SavedTensorSlices::ArenaDtor(void* object) {
  SavedTensorSlices* _this = reinterpret_cast< SavedTensorSlices* >(object);
  (void)_this;
}
void SavedTensorSlices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedTensorSlices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavedTensorSlices::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSlices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedTensorSlices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.SavedTensorSliceMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SavedSlice data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedTensorSlices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSlices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSlices)
  return target;
}

size_t SavedTensorSlices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSlices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTensorSlices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSlices)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedTensorSlices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedTensorSlices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSlices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSlices)
    MergeFrom(*source);
  }
}

void SavedTensorSlices::MergeFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSlices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::tensorflow::SavedTensorSliceMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::tensorflow::SavedSlice::MergeFrom(from._internal_data());
  }
}

void SavedTensorSlices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSlices::CopyFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSlices::IsInitialized() const {
  return true;
}

void SavedTensorSlices::InternalSwap(SavedTensorSlices* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedTensorSlices, data_)
      + sizeof(SavedTensorSlices::data_)
      - PROTOBUF_FIELD_OFFSET(SavedTensorSlices, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSlices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSliceMeta* Arena::CreateMaybeMessage< ::tensorflow::SavedSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSliceMeta* Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSlice* Arena::CreateMaybeMessage< ::tensorflow::SavedSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSlices* Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSlices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSlices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
