// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/step_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/tensor_description.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
namespace tensorflow {
class AllocatorMemoryUsed;
struct AllocatorMemoryUsedDefaultTypeInternal;
extern AllocatorMemoryUsedDefaultTypeInternal _AllocatorMemoryUsed_default_instance_;
class DeviceStepStats;
struct DeviceStepStatsDefaultTypeInternal;
extern DeviceStepStatsDefaultTypeInternal _DeviceStepStats_default_instance_;
class NodeExecStats;
struct NodeExecStatsDefaultTypeInternal;
extern NodeExecStatsDefaultTypeInternal _NodeExecStats_default_instance_;
class NodeOutput;
struct NodeOutputDefaultTypeInternal;
extern NodeOutputDefaultTypeInternal _NodeOutput_default_instance_;
class StepStats;
struct StepStatsDefaultTypeInternal;
extern StepStatsDefaultTypeInternal _StepStats_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::AllocatorMemoryUsed* Arena::CreateMaybeMessage<::tensorflow::AllocatorMemoryUsed>(Arena*);
template<> ::tensorflow::DeviceStepStats* Arena::CreateMaybeMessage<::tensorflow::DeviceStepStats>(Arena*);
template<> ::tensorflow::NodeExecStats* Arena::CreateMaybeMessage<::tensorflow::NodeExecStats>(Arena*);
template<> ::tensorflow::NodeOutput* Arena::CreateMaybeMessage<::tensorflow::NodeOutput>(Arena*);
template<> ::tensorflow::StepStats* Arena::CreateMaybeMessage<::tensorflow::StepStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

enum AllocationType : int {
  AT_NOTUSED = 0,
  AT_ALLOCATED = 1,
  AT_EXISTING = 2,
  AT_REF = 3,
  AllocationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AllocationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AllocationType_IsValid(int value);
constexpr AllocationType AllocationType_MIN = AT_NOTUSED;
constexpr AllocationType AllocationType_MAX = AT_REF;
constexpr int AllocationType_ARRAYSIZE = AllocationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllocationType_descriptor();
template<typename T>
inline const std::string& AllocationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AllocationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AllocationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AllocationType_descriptor(), enum_t_value);
}
inline bool AllocationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AllocationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AllocationType>(
    AllocationType_descriptor(), name, value);
}
// ===================================================================

class AllocatorMemoryUsed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.AllocatorMemoryUsed) */ {
 public:
  inline AllocatorMemoryUsed() : AllocatorMemoryUsed(nullptr) {}
  ~AllocatorMemoryUsed() override;
  explicit constexpr AllocatorMemoryUsed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllocatorMemoryUsed(const AllocatorMemoryUsed& from);
  AllocatorMemoryUsed(AllocatorMemoryUsed&& from) noexcept
    : AllocatorMemoryUsed() {
    *this = ::std::move(from);
  }

  inline AllocatorMemoryUsed& operator=(const AllocatorMemoryUsed& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllocatorMemoryUsed& operator=(AllocatorMemoryUsed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllocatorMemoryUsed& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllocatorMemoryUsed* internal_default_instance() {
    return reinterpret_cast<const AllocatorMemoryUsed*>(
               &_AllocatorMemoryUsed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AllocatorMemoryUsed& a, AllocatorMemoryUsed& b) {
    a.Swap(&b);
  }
  inline void Swap(AllocatorMemoryUsed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllocatorMemoryUsed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllocatorMemoryUsed* New() const final {
    return CreateMaybeMessage<AllocatorMemoryUsed>(nullptr);
  }

  AllocatorMemoryUsed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllocatorMemoryUsed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllocatorMemoryUsed& from);
  void MergeFrom(const AllocatorMemoryUsed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocatorMemoryUsed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.AllocatorMemoryUsed";
  }
  protected:
  explicit AllocatorMemoryUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllocatorNameFieldNumber = 1,
    kTotalBytesFieldNumber = 2,
    kPeakBytesFieldNumber = 3,
  };
  // string allocator_name = 1;
  void clear_allocator_name();
  const std::string& allocator_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allocator_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allocator_name();
  std::string* release_allocator_name();
  void set_allocated_allocator_name(std::string* allocator_name);
  private:
  const std::string& _internal_allocator_name() const;
  void _internal_set_allocator_name(const std::string& value);
  std::string* _internal_mutable_allocator_name();
  public:

  // int64 total_bytes = 2;
  void clear_total_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes() const;
  void set_total_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_bytes() const;
  void _internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 peak_bytes = 3;
  void clear_peak_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 peak_bytes() const;
  void set_peak_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peak_bytes() const;
  void _internal_set_peak_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.AllocatorMemoryUsed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allocator_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 peak_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
};
// -------------------------------------------------------------------

class NodeOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.NodeOutput) */ {
 public:
  inline NodeOutput() : NodeOutput(nullptr) {}
  ~NodeOutput() override;
  explicit constexpr NodeOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeOutput(const NodeOutput& from);
  NodeOutput(NodeOutput&& from) noexcept
    : NodeOutput() {
    *this = ::std::move(from);
  }

  inline NodeOutput& operator=(const NodeOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeOutput& operator=(NodeOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeOutput* internal_default_instance() {
    return reinterpret_cast<const NodeOutput*>(
               &_NodeOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeOutput& a, NodeOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeOutput* New() const final {
    return CreateMaybeMessage<NodeOutput>(nullptr);
  }

  NodeOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeOutput& from);
  void MergeFrom(const NodeOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.NodeOutput";
  }
  protected:
  explicit NodeOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorDescriptionFieldNumber = 3,
    kSlotFieldNumber = 1,
    kAllocationTypeFieldNumber = 2,
  };
  // .tensorflow.TensorDescription tensor_description = 3;
  bool has_tensor_description() const;
  private:
  bool _internal_has_tensor_description() const;
  public:
  void clear_tensor_description();
  const ::tensorflow::TensorDescription& tensor_description() const;
  ::tensorflow::TensorDescription* release_tensor_description();
  ::tensorflow::TensorDescription* mutable_tensor_description();
  void set_allocated_tensor_description(::tensorflow::TensorDescription* tensor_description);
  private:
  const ::tensorflow::TensorDescription& _internal_tensor_description() const;
  ::tensorflow::TensorDescription* _internal_mutable_tensor_description();
  public:
  void unsafe_arena_set_allocated_tensor_description(
      ::tensorflow::TensorDescription* tensor_description);
  ::tensorflow::TensorDescription* unsafe_arena_release_tensor_description();

  // int32 slot = 1;
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .tensorflow.AllocationType allocation_type = 2;
  void clear_allocation_type();
  ::tensorflow::AllocationType allocation_type() const;
  void set_allocation_type(::tensorflow::AllocationType value);
  private:
  ::tensorflow::AllocationType _internal_allocation_type() const;
  void _internal_set_allocation_type(::tensorflow::AllocationType value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.NodeOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::TensorDescription* tensor_description_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  int allocation_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
};
// -------------------------------------------------------------------

class NodeExecStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.NodeExecStats) */ {
 public:
  inline NodeExecStats() : NodeExecStats(nullptr) {}
  ~NodeExecStats() override;
  explicit constexpr NodeExecStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeExecStats(const NodeExecStats& from);
  NodeExecStats(NodeExecStats&& from) noexcept
    : NodeExecStats() {
    *this = ::std::move(from);
  }

  inline NodeExecStats& operator=(const NodeExecStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeExecStats& operator=(NodeExecStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeExecStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeExecStats* internal_default_instance() {
    return reinterpret_cast<const NodeExecStats*>(
               &_NodeExecStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeExecStats& a, NodeExecStats& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeExecStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeExecStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeExecStats* New() const final {
    return CreateMaybeMessage<NodeExecStats>(nullptr);
  }

  NodeExecStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeExecStats& from);
  void MergeFrom(const NodeExecStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.NodeExecStats";
  }
  protected:
  explicit NodeExecStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryFieldNumber = 6,
    kOutputFieldNumber = 7,
    kNodeNameFieldNumber = 1,
    kTimelineLabelFieldNumber = 8,
    kAllStartMicrosFieldNumber = 2,
    kOpStartRelMicrosFieldNumber = 3,
    kOpEndRelMicrosFieldNumber = 4,
    kAllEndRelMicrosFieldNumber = 5,
    kScheduledMicrosFieldNumber = 9,
    kThreadIdFieldNumber = 10,
  };
  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  int memory_size() const;
  private:
  int _internal_memory_size() const;
  public:
  void clear_memory();
  ::tensorflow::AllocatorMemoryUsed* mutable_memory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >*
      mutable_memory();
  private:
  const ::tensorflow::AllocatorMemoryUsed& _internal_memory(int index) const;
  ::tensorflow::AllocatorMemoryUsed* _internal_add_memory();
  public:
  const ::tensorflow::AllocatorMemoryUsed& memory(int index) const;
  ::tensorflow::AllocatorMemoryUsed* add_memory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >&
      memory() const;

  // repeated .tensorflow.NodeOutput output = 7;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::tensorflow::NodeOutput* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeOutput >*
      mutable_output();
  private:
  const ::tensorflow::NodeOutput& _internal_output(int index) const;
  ::tensorflow::NodeOutput* _internal_add_output();
  public:
  const ::tensorflow::NodeOutput& output(int index) const;
  ::tensorflow::NodeOutput* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeOutput >&
      output() const;

  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string timeline_label = 8;
  void clear_timeline_label();
  const std::string& timeline_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timeline_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timeline_label();
  std::string* release_timeline_label();
  void set_allocated_timeline_label(std::string* timeline_label);
  private:
  const std::string& _internal_timeline_label() const;
  void _internal_set_timeline_label(const std::string& value);
  std::string* _internal_mutable_timeline_label();
  public:

  // int64 all_start_micros = 2;
  void clear_all_start_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 all_start_micros() const;
  void set_all_start_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_all_start_micros() const;
  void _internal_set_all_start_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 op_start_rel_micros = 3;
  void clear_op_start_rel_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 op_start_rel_micros() const;
  void set_op_start_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_start_rel_micros() const;
  void _internal_set_op_start_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 op_end_rel_micros = 4;
  void clear_op_end_rel_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 op_end_rel_micros() const;
  void set_op_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_end_rel_micros() const;
  void _internal_set_op_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 all_end_rel_micros = 5;
  void clear_all_end_rel_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 all_end_rel_micros() const;
  void set_all_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_all_end_rel_micros() const;
  void _internal_set_all_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 scheduled_micros = 9;
  void clear_scheduled_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 scheduled_micros() const;
  void set_scheduled_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scheduled_micros() const;
  void _internal_set_scheduled_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 thread_id = 10;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.NodeExecStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed > memory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeOutput > output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_label_;
  ::PROTOBUF_NAMESPACE_ID::int64 all_start_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_start_rel_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_end_rel_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 all_end_rel_micros_;
  ::PROTOBUF_NAMESPACE_ID::int64 scheduled_micros_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
};
// -------------------------------------------------------------------

class DeviceStepStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.DeviceStepStats) */ {
 public:
  inline DeviceStepStats() : DeviceStepStats(nullptr) {}
  ~DeviceStepStats() override;
  explicit constexpr DeviceStepStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceStepStats(const DeviceStepStats& from);
  DeviceStepStats(DeviceStepStats&& from) noexcept
    : DeviceStepStats() {
    *this = ::std::move(from);
  }

  inline DeviceStepStats& operator=(const DeviceStepStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStepStats& operator=(DeviceStepStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceStepStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStepStats* internal_default_instance() {
    return reinterpret_cast<const DeviceStepStats*>(
               &_DeviceStepStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceStepStats& a, DeviceStepStats& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStepStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStepStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStepStats* New() const final {
    return CreateMaybeMessage<DeviceStepStats>(nullptr);
  }

  DeviceStepStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStepStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceStepStats& from);
  void MergeFrom(const DeviceStepStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStepStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.DeviceStepStats";
  }
  protected:
  explicit DeviceStepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStatsFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // repeated .tensorflow.NodeExecStats node_stats = 2;
  int node_stats_size() const;
  private:
  int _internal_node_stats_size() const;
  public:
  void clear_node_stats();
  ::tensorflow::NodeExecStats* mutable_node_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeExecStats >*
      mutable_node_stats();
  private:
  const ::tensorflow::NodeExecStats& _internal_node_stats(int index) const;
  ::tensorflow::NodeExecStats* _internal_add_node_stats();
  public:
  const ::tensorflow::NodeExecStats& node_stats(int index) const;
  ::tensorflow::NodeExecStats* add_node_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeExecStats >&
      node_stats() const;

  // string device = 1;
  void clear_device();
  const std::string& device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.DeviceStepStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeExecStats > node_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
};
// -------------------------------------------------------------------

class StepStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.StepStats) */ {
 public:
  inline StepStats() : StepStats(nullptr) {}
  ~StepStats() override;
  explicit constexpr StepStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepStats(const StepStats& from);
  StepStats(StepStats&& from) noexcept
    : StepStats() {
    *this = ::std::move(from);
  }

  inline StepStats& operator=(const StepStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepStats& operator=(StepStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepStats* internal_default_instance() {
    return reinterpret_cast<const StepStats*>(
               &_StepStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StepStats& a, StepStats& b) {
    a.Swap(&b);
  }
  inline void Swap(StepStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepStats* New() const final {
    return CreateMaybeMessage<StepStats>(nullptr);
  }

  StepStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepStats& from);
  void MergeFrom(const StepStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.StepStats";
  }
  protected:
  explicit StepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevStatsFieldNumber = 1,
  };
  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  int dev_stats_size() const;
  private:
  int _internal_dev_stats_size() const;
  public:
  void clear_dev_stats();
  ::tensorflow::DeviceStepStats* mutable_dev_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::DeviceStepStats >*
      mutable_dev_stats();
  private:
  const ::tensorflow::DeviceStepStats& _internal_dev_stats(int index) const;
  ::tensorflow::DeviceStepStats* _internal_add_dev_stats();
  public:
  const ::tensorflow::DeviceStepStats& dev_stats(int index) const;
  ::tensorflow::DeviceStepStats* add_dev_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::DeviceStepStats >&
      dev_stats() const;

  // @@protoc_insertion_point(class_scope:tensorflow.StepStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::DeviceStepStats > dev_stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AllocatorMemoryUsed

// string allocator_name = 1;
inline void AllocatorMemoryUsed::clear_allocator_name() {
  allocator_name_.ClearToEmpty();
}
inline const std::string& AllocatorMemoryUsed::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.allocator_name)
  return _internal_allocator_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AllocatorMemoryUsed::set_allocator_name(ArgT0&& arg0, ArgT... args) {
 
 allocator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.allocator_name)
}
inline std::string* AllocatorMemoryUsed::mutable_allocator_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.AllocatorMemoryUsed.allocator_name)
  return _internal_mutable_allocator_name();
}
inline const std::string& AllocatorMemoryUsed::_internal_allocator_name() const {
  return allocator_name_.Get();
}
inline void AllocatorMemoryUsed::_internal_set_allocator_name(const std::string& value) {
  
  allocator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AllocatorMemoryUsed::_internal_mutable_allocator_name() {
  
  return allocator_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AllocatorMemoryUsed::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.AllocatorMemoryUsed.allocator_name)
  return allocator_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AllocatorMemoryUsed::set_allocated_allocator_name(std::string* allocator_name) {
  if (allocator_name != nullptr) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AllocatorMemoryUsed.allocator_name)
}

// int64 total_bytes = 2;
inline void AllocatorMemoryUsed::clear_total_bytes() {
  total_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllocatorMemoryUsed::_internal_total_bytes() const {
  return total_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllocatorMemoryUsed::total_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.total_bytes)
  return _internal_total_bytes();
}
inline void AllocatorMemoryUsed::_internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_bytes_ = value;
}
inline void AllocatorMemoryUsed::set_total_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.total_bytes)
}

// int64 peak_bytes = 3;
inline void AllocatorMemoryUsed::clear_peak_bytes() {
  peak_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllocatorMemoryUsed::_internal_peak_bytes() const {
  return peak_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AllocatorMemoryUsed::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.peak_bytes)
  return _internal_peak_bytes();
}
inline void AllocatorMemoryUsed::_internal_set_peak_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  peak_bytes_ = value;
}
inline void AllocatorMemoryUsed::set_peak_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peak_bytes(value);
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.peak_bytes)
}

// -------------------------------------------------------------------

// NodeOutput

// int32 slot = 1;
inline void NodeOutput::clear_slot() {
  slot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeOutput::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeOutput::slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.slot)
  return _internal_slot();
}
inline void NodeOutput::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slot_ = value;
}
inline void NodeOutput::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeOutput.slot)
}

// .tensorflow.AllocationType allocation_type = 2;
inline void NodeOutput::clear_allocation_type() {
  allocation_type_ = 0;
}
inline ::tensorflow::AllocationType NodeOutput::_internal_allocation_type() const {
  return static_cast< ::tensorflow::AllocationType >(allocation_type_);
}
inline ::tensorflow::AllocationType NodeOutput::allocation_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.allocation_type)
  return _internal_allocation_type();
}
inline void NodeOutput::_internal_set_allocation_type(::tensorflow::AllocationType value) {
  
  allocation_type_ = value;
}
inline void NodeOutput::set_allocation_type(::tensorflow::AllocationType value) {
  _internal_set_allocation_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeOutput.allocation_type)
}

// .tensorflow.TensorDescription tensor_description = 3;
inline bool NodeOutput::_internal_has_tensor_description() const {
  return this != internal_default_instance() && tensor_description_ != nullptr;
}
inline bool NodeOutput::has_tensor_description() const {
  return _internal_has_tensor_description();
}
inline const ::tensorflow::TensorDescription& NodeOutput::_internal_tensor_description() const {
  const ::tensorflow::TensorDescription* p = tensor_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorDescription&>(
      ::tensorflow::_TensorDescription_default_instance_);
}
inline const ::tensorflow::TensorDescription& NodeOutput::tensor_description() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.tensor_description)
  return _internal_tensor_description();
}
inline void NodeOutput::unsafe_arena_set_allocated_tensor_description(
    ::tensorflow::TensorDescription* tensor_description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_description_);
  }
  tensor_description_ = tensor_description;
  if (tensor_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeOutput.tensor_description)
}
inline ::tensorflow::TensorDescription* NodeOutput::release_tensor_description() {
  
  ::tensorflow::TensorDescription* temp = tensor_description_;
  tensor_description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::TensorDescription* NodeOutput::unsafe_arena_release_tensor_description() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeOutput.tensor_description)
  
  ::tensorflow::TensorDescription* temp = tensor_description_;
  tensor_description_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorDescription* NodeOutput::_internal_mutable_tensor_description() {
  
  if (tensor_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorDescription>(GetArena());
    tensor_description_ = p;
  }
  return tensor_description_;
}
inline ::tensorflow::TensorDescription* NodeOutput::mutable_tensor_description() {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeOutput.tensor_description)
  return _internal_mutable_tensor_description();
}
inline void NodeOutput::set_allocated_tensor_description(::tensorflow::TensorDescription* tensor_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_description_);
  }
  if (tensor_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_description)->GetArena();
    if (message_arena != submessage_arena) {
      tensor_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_description, submessage_arena);
    }
    
  } else {
    
  }
  tensor_description_ = tensor_description;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeOutput.tensor_description)
}

// -------------------------------------------------------------------

// NodeExecStats

// string node_name = 1;
inline void NodeExecStats::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& NodeExecStats::node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NodeExecStats::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.node_name)
}
inline std::string* NodeExecStats::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& NodeExecStats::_internal_node_name() const {
  return node_name_.Get();
}
inline void NodeExecStats::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NodeExecStats::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeExecStats::release_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeExecStats::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.node_name)
}

// int64 all_start_micros = 2;
inline void NodeExecStats::clear_all_start_micros() {
  all_start_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::_internal_all_start_micros() const {
  return all_start_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::all_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_start_micros)
  return _internal_all_start_micros();
}
inline void NodeExecStats::_internal_set_all_start_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  all_start_micros_ = value;
}
inline void NodeExecStats::set_all_start_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_all_start_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_start_micros)
}

// int64 op_start_rel_micros = 3;
inline void NodeExecStats::clear_op_start_rel_micros() {
  op_start_rel_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::_internal_op_start_rel_micros() const {
  return op_start_rel_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::op_start_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_start_rel_micros)
  return _internal_op_start_rel_micros();
}
inline void NodeExecStats::_internal_set_op_start_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_start_rel_micros_ = value;
}
inline void NodeExecStats::set_op_start_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_start_rel_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_start_rel_micros)
}

// int64 op_end_rel_micros = 4;
inline void NodeExecStats::clear_op_end_rel_micros() {
  op_end_rel_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::_internal_op_end_rel_micros() const {
  return op_end_rel_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::op_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_end_rel_micros)
  return _internal_op_end_rel_micros();
}
inline void NodeExecStats::_internal_set_op_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_end_rel_micros_ = value;
}
inline void NodeExecStats::set_op_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_end_rel_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_end_rel_micros)
}

// int64 all_end_rel_micros = 5;
inline void NodeExecStats::clear_all_end_rel_micros() {
  all_end_rel_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::_internal_all_end_rel_micros() const {
  return all_end_rel_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::all_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_end_rel_micros)
  return _internal_all_end_rel_micros();
}
inline void NodeExecStats::_internal_set_all_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  all_end_rel_micros_ = value;
}
inline void NodeExecStats::set_all_end_rel_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_all_end_rel_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_end_rel_micros)
}

// repeated .tensorflow.AllocatorMemoryUsed memory = 6;
inline int NodeExecStats::_internal_memory_size() const {
  return memory_.size();
}
inline int NodeExecStats::memory_size() const {
  return _internal_memory_size();
}
inline void NodeExecStats::clear_memory() {
  memory_.Clear();
}
inline ::tensorflow::AllocatorMemoryUsed* NodeExecStats::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.memory)
  return memory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >*
NodeExecStats::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.memory)
  return &memory_;
}
inline const ::tensorflow::AllocatorMemoryUsed& NodeExecStats::_internal_memory(int index) const {
  return memory_.Get(index);
}
inline const ::tensorflow::AllocatorMemoryUsed& NodeExecStats::memory(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.memory)
  return _internal_memory(index);
}
inline ::tensorflow::AllocatorMemoryUsed* NodeExecStats::_internal_add_memory() {
  return memory_.Add();
}
inline ::tensorflow::AllocatorMemoryUsed* NodeExecStats::add_memory() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.memory)
  return _internal_add_memory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >&
NodeExecStats::memory() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.memory)
  return memory_;
}

// repeated .tensorflow.NodeOutput output = 7;
inline int NodeExecStats::_internal_output_size() const {
  return output_.size();
}
inline int NodeExecStats::output_size() const {
  return _internal_output_size();
}
inline void NodeExecStats::clear_output() {
  output_.Clear();
}
inline ::tensorflow::NodeOutput* NodeExecStats::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeOutput >*
NodeExecStats::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.output)
  return &output_;
}
inline const ::tensorflow::NodeOutput& NodeExecStats::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::tensorflow::NodeOutput& NodeExecStats::output(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.output)
  return _internal_output(index);
}
inline ::tensorflow::NodeOutput* NodeExecStats::_internal_add_output() {
  return output_.Add();
}
inline ::tensorflow::NodeOutput* NodeExecStats::add_output() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeOutput >&
NodeExecStats::output() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.output)
  return output_;
}

// string timeline_label = 8;
inline void NodeExecStats::clear_timeline_label() {
  timeline_label_.ClearToEmpty();
}
inline const std::string& NodeExecStats::timeline_label() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.timeline_label)
  return _internal_timeline_label();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NodeExecStats::set_timeline_label(ArgT0&& arg0, ArgT... args) {
 
 timeline_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.timeline_label)
}
inline std::string* NodeExecStats::mutable_timeline_label() {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.timeline_label)
  return _internal_mutable_timeline_label();
}
inline const std::string& NodeExecStats::_internal_timeline_label() const {
  return timeline_label_.Get();
}
inline void NodeExecStats::_internal_set_timeline_label(const std::string& value) {
  
  timeline_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NodeExecStats::_internal_mutable_timeline_label() {
  
  return timeline_label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeExecStats::release_timeline_label() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.timeline_label)
  return timeline_label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeExecStats::set_allocated_timeline_label(std::string* timeline_label) {
  if (timeline_label != nullptr) {
    
  } else {
    
  }
  timeline_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeline_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.timeline_label)
}

// int64 scheduled_micros = 9;
inline void NodeExecStats::clear_scheduled_micros() {
  scheduled_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::_internal_scheduled_micros() const {
  return scheduled_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeExecStats::scheduled_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.scheduled_micros)
  return _internal_scheduled_micros();
}
inline void NodeExecStats::_internal_set_scheduled_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  scheduled_micros_ = value;
}
inline void NodeExecStats::set_scheduled_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scheduled_micros(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.scheduled_micros)
}

// uint32 thread_id = 10;
inline void NodeExecStats::clear_thread_id() {
  thread_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeExecStats::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeExecStats::thread_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.thread_id)
  return _internal_thread_id();
}
inline void NodeExecStats::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thread_id_ = value;
}
inline void NodeExecStats::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.thread_id)
}

// -------------------------------------------------------------------

// DeviceStepStats

// string device = 1;
inline void DeviceStepStats::clear_device() {
  device_.ClearToEmpty();
}
inline const std::string& DeviceStepStats::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.device)
  return _internal_device();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DeviceStepStats::set_device(ArgT0&& arg0, ArgT... args) {
 
 device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceStepStats.device)
}
inline std::string* DeviceStepStats::mutable_device() {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.device)
  return _internal_mutable_device();
}
inline const std::string& DeviceStepStats::_internal_device() const {
  return device_.Get();
}
inline void DeviceStepStats::_internal_set_device(const std::string& value) {
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DeviceStepStats::_internal_mutable_device() {
  
  return device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceStepStats::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceStepStats.device)
  return device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceStepStats::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceStepStats.device)
}

// repeated .tensorflow.NodeExecStats node_stats = 2;
inline int DeviceStepStats::_internal_node_stats_size() const {
  return node_stats_.size();
}
inline int DeviceStepStats::node_stats_size() const {
  return _internal_node_stats_size();
}
inline void DeviceStepStats::clear_node_stats() {
  node_stats_.Clear();
}
inline ::tensorflow::NodeExecStats* DeviceStepStats::mutable_node_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeExecStats >*
DeviceStepStats::mutable_node_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DeviceStepStats.node_stats)
  return &node_stats_;
}
inline const ::tensorflow::NodeExecStats& DeviceStepStats::_internal_node_stats(int index) const {
  return node_stats_.Get(index);
}
inline const ::tensorflow::NodeExecStats& DeviceStepStats::node_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.node_stats)
  return _internal_node_stats(index);
}
inline ::tensorflow::NodeExecStats* DeviceStepStats::_internal_add_node_stats() {
  return node_stats_.Add();
}
inline ::tensorflow::NodeExecStats* DeviceStepStats::add_node_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.DeviceStepStats.node_stats)
  return _internal_add_node_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NodeExecStats >&
DeviceStepStats::node_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.DeviceStepStats.node_stats)
  return node_stats_;
}

// -------------------------------------------------------------------

// StepStats

// repeated .tensorflow.DeviceStepStats dev_stats = 1;
inline int StepStats::_internal_dev_stats_size() const {
  return dev_stats_.size();
}
inline int StepStats::dev_stats_size() const {
  return _internal_dev_stats_size();
}
inline void StepStats::clear_dev_stats() {
  dev_stats_.Clear();
}
inline ::tensorflow::DeviceStepStats* StepStats::mutable_dev_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.StepStats.dev_stats)
  return dev_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::DeviceStepStats >*
StepStats::mutable_dev_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.StepStats.dev_stats)
  return &dev_stats_;
}
inline const ::tensorflow::DeviceStepStats& StepStats::_internal_dev_stats(int index) const {
  return dev_stats_.Get(index);
}
inline const ::tensorflow::DeviceStepStats& StepStats::dev_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.StepStats.dev_stats)
  return _internal_dev_stats(index);
}
inline ::tensorflow::DeviceStepStats* StepStats::_internal_add_dev_stats() {
  return dev_stats_.Add();
}
inline ::tensorflow::DeviceStepStats* StepStats::add_dev_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.StepStats.dev_stats)
  return _internal_add_dev_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::DeviceStepStats >&
StepStats::dev_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.StepStats.dev_stats)
  return dev_stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::AllocationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::AllocationType>() {
  return ::tensorflow::AllocationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto
