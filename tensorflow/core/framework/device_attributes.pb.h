// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/device_attributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
namespace tensorflow {
class DeviceAttributes;
struct DeviceAttributesDefaultTypeInternal;
extern DeviceAttributesDefaultTypeInternal _DeviceAttributes_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::DeviceAttributes* Arena::CreateMaybeMessage<::tensorflow::DeviceAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

enum BusAdjacency : int {
  BUS_0 = 0,
  BUS_1 = 1,
  BUS_ANY = 2,
  BUS_NUM_ADJACENCIES = 3,
  BusAdjacency_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BusAdjacency_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BusAdjacency_IsValid(int value);
constexpr BusAdjacency BusAdjacency_MIN = BUS_0;
constexpr BusAdjacency BusAdjacency_MAX = BUS_NUM_ADJACENCIES;
constexpr int BusAdjacency_ARRAYSIZE = BusAdjacency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusAdjacency_descriptor();
template<typename T>
inline const std::string& BusAdjacency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BusAdjacency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BusAdjacency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BusAdjacency_descriptor(), enum_t_value);
}
inline bool BusAdjacency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BusAdjacency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BusAdjacency>(
    BusAdjacency_descriptor(), name, value);
}
// ===================================================================

class DeviceAttributes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.DeviceAttributes) */ {
 public:
  inline DeviceAttributes() : DeviceAttributes(nullptr) {}
  ~DeviceAttributes() override;
  explicit constexpr DeviceAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceAttributes(const DeviceAttributes& from);
  DeviceAttributes(DeviceAttributes&& from) noexcept
    : DeviceAttributes() {
    *this = ::std::move(from);
  }

  inline DeviceAttributes& operator=(const DeviceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAttributes& operator=(DeviceAttributes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceAttributes* internal_default_instance() {
    return reinterpret_cast<const DeviceAttributes*>(
               &_DeviceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceAttributes& a, DeviceAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceAttributes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceAttributes* New() const final {
    return CreateMaybeMessage<DeviceAttributes>(nullptr);
  }

  DeviceAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceAttributes& from);
  void MergeFrom(const DeviceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.DeviceAttributes";
  }
  protected:
  explicit DeviceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kPhysicalDeviceDescFieldNumber = 7,
    kMemoryLimitFieldNumber = 4,
    kIncarnationFieldNumber = 6,
    kBusAdjacencyFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string device_type = 2;
  void clear_device_type();
  const std::string& device_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_type();
  std::string* release_device_type();
  void set_allocated_device_type(std::string* device_type);
  private:
  const std::string& _internal_device_type() const;
  void _internal_set_device_type(const std::string& value);
  std::string* _internal_mutable_device_type();
  public:

  // string physical_device_desc = 7;
  void clear_physical_device_desc();
  const std::string& physical_device_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_physical_device_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_physical_device_desc();
  std::string* release_physical_device_desc();
  void set_allocated_physical_device_desc(std::string* physical_device_desc);
  private:
  const std::string& _internal_physical_device_desc() const;
  void _internal_set_physical_device_desc(const std::string& value);
  std::string* _internal_mutable_physical_device_desc();
  public:

  // int64 memory_limit = 4;
  void clear_memory_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit() const;
  void set_memory_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_memory_limit() const;
  void _internal_set_memory_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed64 incarnation = 6;
  void clear_incarnation();
  ::PROTOBUF_NAMESPACE_ID::uint64 incarnation() const;
  void set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_incarnation() const;
  void _internal_set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .tensorflow.BusAdjacency bus_adjacency = 5;
  void clear_bus_adjacency();
  ::tensorflow::BusAdjacency bus_adjacency() const;
  void set_bus_adjacency(::tensorflow::BusAdjacency value);
  private:
  ::tensorflow::BusAdjacency _internal_bus_adjacency() const;
  void _internal_set_bus_adjacency(::tensorflow::BusAdjacency value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.DeviceAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physical_device_desc_;
  ::PROTOBUF_NAMESPACE_ID::int64 memory_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 incarnation_;
  int bus_adjacency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceAttributes

// string name = 1;
inline void DeviceAttributes::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeviceAttributes::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DeviceAttributes::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.name)
}
inline std::string* DeviceAttributes::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.name)
  return _internal_mutable_name();
}
inline const std::string& DeviceAttributes::_internal_name() const {
  return name_.Get();
}
inline void DeviceAttributes::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DeviceAttributes::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceAttributes::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAttributes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.name)
}

// string device_type = 2;
inline void DeviceAttributes::clear_device_type() {
  device_type_.ClearToEmpty();
}
inline const std::string& DeviceAttributes::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.device_type)
  return _internal_device_type();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DeviceAttributes::set_device_type(ArgT0&& arg0, ArgT... args) {
 
 device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.device_type)
}
inline std::string* DeviceAttributes::mutable_device_type() {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.device_type)
  return _internal_mutable_device_type();
}
inline const std::string& DeviceAttributes::_internal_device_type() const {
  return device_type_.Get();
}
inline void DeviceAttributes::_internal_set_device_type(const std::string& value) {
  
  device_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DeviceAttributes::_internal_mutable_device_type() {
  
  return device_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceAttributes::release_device_type() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.device_type)
  return device_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAttributes::set_allocated_device_type(std::string* device_type) {
  if (device_type != nullptr) {
    
  } else {
    
  }
  device_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.device_type)
}

// int64 memory_limit = 4;
inline void DeviceAttributes::clear_memory_limit() {
  memory_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceAttributes::_internal_memory_limit() const {
  return memory_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceAttributes::memory_limit() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.memory_limit)
  return _internal_memory_limit();
}
inline void DeviceAttributes::_internal_set_memory_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  memory_limit_ = value;
}
inline void DeviceAttributes::set_memory_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_memory_limit(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.memory_limit)
}

// .tensorflow.BusAdjacency bus_adjacency = 5;
inline void DeviceAttributes::clear_bus_adjacency() {
  bus_adjacency_ = 0;
}
inline ::tensorflow::BusAdjacency DeviceAttributes::_internal_bus_adjacency() const {
  return static_cast< ::tensorflow::BusAdjacency >(bus_adjacency_);
}
inline ::tensorflow::BusAdjacency DeviceAttributes::bus_adjacency() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.bus_adjacency)
  return _internal_bus_adjacency();
}
inline void DeviceAttributes::_internal_set_bus_adjacency(::tensorflow::BusAdjacency value) {
  
  bus_adjacency_ = value;
}
inline void DeviceAttributes::set_bus_adjacency(::tensorflow::BusAdjacency value) {
  _internal_set_bus_adjacency(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.bus_adjacency)
}

// fixed64 incarnation = 6;
inline void DeviceAttributes::clear_incarnation() {
  incarnation_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeviceAttributes::_internal_incarnation() const {
  return incarnation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeviceAttributes::incarnation() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.incarnation)
  return _internal_incarnation();
}
inline void DeviceAttributes::_internal_set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  incarnation_ = value;
}
inline void DeviceAttributes::set_incarnation(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_incarnation(value);
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.incarnation)
}

// string physical_device_desc = 7;
inline void DeviceAttributes::clear_physical_device_desc() {
  physical_device_desc_.ClearToEmpty();
}
inline const std::string& DeviceAttributes::physical_device_desc() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceAttributes.physical_device_desc)
  return _internal_physical_device_desc();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DeviceAttributes::set_physical_device_desc(ArgT0&& arg0, ArgT... args) {
 
 physical_device_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceAttributes.physical_device_desc)
}
inline std::string* DeviceAttributes::mutable_physical_device_desc() {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceAttributes.physical_device_desc)
  return _internal_mutable_physical_device_desc();
}
inline const std::string& DeviceAttributes::_internal_physical_device_desc() const {
  return physical_device_desc_.Get();
}
inline void DeviceAttributes::_internal_set_physical_device_desc(const std::string& value) {
  
  physical_device_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DeviceAttributes::_internal_mutable_physical_device_desc() {
  
  return physical_device_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceAttributes::release_physical_device_desc() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceAttributes.physical_device_desc)
  return physical_device_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceAttributes::set_allocated_physical_device_desc(std::string* physical_device_desc) {
  if (physical_device_desc != nullptr) {
    
  } else {
    
  }
  physical_device_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physical_device_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceAttributes.physical_device_desc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::BusAdjacency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::BusAdjacency>() {
  return ::tensorflow::BusAdjacency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto
