// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/step_stats.proto

#include "tensorflow/core/framework/step_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorflow {
constexpr AllocatorMemoryUsed::AllocatorMemoryUsed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allocator_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_bytes_(PROTOBUF_LONGLONG(0))
  , peak_bytes_(PROTOBUF_LONGLONG(0)){}
struct AllocatorMemoryUsedDefaultTypeInternal {
  constexpr AllocatorMemoryUsedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllocatorMemoryUsedDefaultTypeInternal() {}
  union {
    AllocatorMemoryUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllocatorMemoryUsedDefaultTypeInternal _AllocatorMemoryUsed_default_instance_;
constexpr NodeOutput::NodeOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensor_description_(nullptr)
  , slot_(0)
  , allocation_type_(0)
{}
struct NodeOutputDefaultTypeInternal {
  constexpr NodeOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeOutputDefaultTypeInternal() {}
  union {
    NodeOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeOutputDefaultTypeInternal _NodeOutput_default_instance_;
constexpr NodeExecStats::NodeExecStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memory_()
  , output_()
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeline_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , all_start_micros_(PROTOBUF_LONGLONG(0))
  , op_start_rel_micros_(PROTOBUF_LONGLONG(0))
  , op_end_rel_micros_(PROTOBUF_LONGLONG(0))
  , all_end_rel_micros_(PROTOBUF_LONGLONG(0))
  , scheduled_micros_(PROTOBUF_LONGLONG(0))
  , thread_id_(0u){}
struct NodeExecStatsDefaultTypeInternal {
  constexpr NodeExecStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecStatsDefaultTypeInternal() {}
  union {
    NodeExecStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecStatsDefaultTypeInternal _NodeExecStats_default_instance_;
constexpr DeviceStepStats::DeviceStepStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_stats_()
  , device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceStepStatsDefaultTypeInternal {
  constexpr DeviceStepStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStepStatsDefaultTypeInternal() {}
  union {
    DeviceStepStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStepStatsDefaultTypeInternal _DeviceStepStats_default_instance_;
constexpr StepStats::StepStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dev_stats_(){}
struct StepStatsDefaultTypeInternal {
  constexpr StepStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StepStatsDefaultTypeInternal() {}
  union {
    StepStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StepStatsDefaultTypeInternal _StepStats_default_instance_;
}  // namespace tensorflow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocatorMemoryUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocatorMemoryUsed, allocator_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocatorMemoryUsed, total_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocatorMemoryUsed, peak_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeOutput, slot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeOutput, allocation_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeOutput, tensor_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, all_start_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, op_start_rel_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, op_end_rel_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, all_end_rel_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, output_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, timeline_label_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, scheduled_micros_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NodeExecStats, thread_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceStepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceStepStats, device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceStepStats, node_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StepStats, dev_stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::AllocatorMemoryUsed)},
  { 8, -1, sizeof(::tensorflow::NodeOutput)},
  { 16, -1, sizeof(::tensorflow::NodeExecStats)},
  { 31, -1, sizeof(::tensorflow::DeviceStepStats)},
  { 38, -1, sizeof(::tensorflow::StepStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AllocatorMemoryUsed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NodeOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_NodeExecStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DeviceStepStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_StepStats_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*tensorflow/core/framework/step_stats.p"
  "roto\022\ntensorflow\0322tensorflow/core/framew"
  "ork/tensor_description.proto\"V\n\023Allocato"
  "rMemoryUsed\022\026\n\016allocator_name\030\001 \001(\t\022\023\n\013t"
  "otal_bytes\030\002 \001(\003\022\022\n\npeak_bytes\030\003 \001(\003\"\212\001\n"
  "\nNodeOutput\022\014\n\004slot\030\001 \001(\005\0223\n\017allocation_"
  "type\030\002 \001(\0162\032.tensorflow.AllocationType\0229"
  "\n\022tensor_description\030\003 \001(\0132\035.tensorflow."
  "TensorDescription\"\256\002\n\rNodeExecStats\022\021\n\tn"
  "ode_name\030\001 \001(\t\022\030\n\020all_start_micros\030\002 \001(\003"
  "\022\033\n\023op_start_rel_micros\030\003 \001(\003\022\031\n\021op_end_"
  "rel_micros\030\004 \001(\003\022\032\n\022all_end_rel_micros\030\005"
  " \001(\003\022/\n\006memory\030\006 \003(\0132\037.tensorflow.Alloca"
  "torMemoryUsed\022&\n\006output\030\007 \003(\0132\026.tensorfl"
  "ow.NodeOutput\022\026\n\016timeline_label\030\010 \001(\t\022\030\n"
  "\020scheduled_micros\030\t \001(\003\022\021\n\tthread_id\030\n \001"
  "(\r\"P\n\017DeviceStepStats\022\016\n\006device\030\001 \001(\t\022-\n"
  "\nnode_stats\030\002 \003(\0132\031.tensorflow.NodeExecS"
  "tats\";\n\tStepStats\022.\n\tdev_stats\030\001 \003(\0132\033.t"
  "ensorflow.DeviceStepStats*O\n\016AllocationT"
  "ype\022\016\n\nAT_NOTUSED\020\000\022\020\n\014AT_ALLOCATED\020\001\022\017\n"
  "\013AT_EXISTING\020\002\022\n\n\006AT_REF\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto = {
  false, false, 874, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto, "tensorflow/core/framework/step_stats.proto", 
  &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllocationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[0];
}
bool AllocationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AllocatorMemoryUsed::_Internal {
 public:
};

AllocatorMemoryUsed::AllocatorMemoryUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AllocatorMemoryUsed)
}
AllocatorMemoryUsed::AllocatorMemoryUsed(const AllocatorMemoryUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_allocator_name().empty()) {
    allocator_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allocator_name(), 
      GetArena());
  }
  ::memcpy(&total_bytes_, &from.total_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_bytes_) -
    reinterpret_cast<char*>(&total_bytes_)) + sizeof(peak_bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AllocatorMemoryUsed)
}

void AllocatorMemoryUsed::SharedCtor() {
allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peak_bytes_) -
    reinterpret_cast<char*>(&total_bytes_)) + sizeof(peak_bytes_));
}

AllocatorMemoryUsed::~AllocatorMemoryUsed() {
  // @@protoc_insertion_point(destructor:tensorflow.AllocatorMemoryUsed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocatorMemoryUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  allocator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllocatorMemoryUsed::ArenaDtor(void* object) {
  AllocatorMemoryUsed* _this = reinterpret_cast< AllocatorMemoryUsed* >(object);
  (void)_this;
}
void AllocatorMemoryUsed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocatorMemoryUsed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllocatorMemoryUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AllocatorMemoryUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocator_name_.ClearToEmpty();
  ::memset(&total_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_bytes_) -
      reinterpret_cast<char*>(&total_bytes_)) + sizeof(peak_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocatorMemoryUsed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string allocator_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_allocator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.AllocatorMemoryUsed.allocator_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          peak_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocatorMemoryUsed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AllocatorMemoryUsed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_allocator_name().data(), static_cast<int>(this->_internal_allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocatorMemoryUsed.allocator_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_allocator_name(), target);
  }

  // int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_bytes(), target);
  }

  // int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_peak_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AllocatorMemoryUsed)
  return target;
}

size_t AllocatorMemoryUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AllocatorMemoryUsed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_allocator_name());
  }

  // int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bytes());
  }

  // int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocatorMemoryUsed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AllocatorMemoryUsed)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocatorMemoryUsed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocatorMemoryUsed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AllocatorMemoryUsed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AllocatorMemoryUsed)
    MergeFrom(*source);
  }
}

void AllocatorMemoryUsed::MergeFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AllocatorMemoryUsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allocator_name().size() > 0) {
    _internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from.total_bytes() != 0) {
    _internal_set_total_bytes(from._internal_total_bytes());
  }
  if (from.peak_bytes() != 0) {
    _internal_set_peak_bytes(from._internal_peak_bytes());
  }
}

void AllocatorMemoryUsed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocatorMemoryUsed::CopyFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatorMemoryUsed::IsInitialized() const {
  return true;
}

void AllocatorMemoryUsed::InternalSwap(AllocatorMemoryUsed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allocator_name_.Swap(&other->allocator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocatorMemoryUsed, peak_bytes_)
      + sizeof(AllocatorMemoryUsed::peak_bytes_)
      - PROTOBUF_FIELD_OFFSET(AllocatorMemoryUsed, total_bytes_)>(
          reinterpret_cast<char*>(&total_bytes_),
          reinterpret_cast<char*>(&other->total_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocatorMemoryUsed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[0]);
}

// ===================================================================

class NodeOutput::_Internal {
 public:
  static const ::tensorflow::TensorDescription& tensor_description(const NodeOutput* msg);
};

const ::tensorflow::TensorDescription&
NodeOutput::_Internal::tensor_description(const NodeOutput* msg) {
  return *msg->tensor_description_;
}
void NodeOutput::clear_tensor_description() {
  if (GetArena() == nullptr && tensor_description_ != nullptr) {
    delete tensor_description_;
  }
  tensor_description_ = nullptr;
}
NodeOutput::NodeOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeOutput)
}
NodeOutput::NodeOutput(const NodeOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor_description()) {
    tensor_description_ = new ::tensorflow::TensorDescription(*from.tensor_description_);
  } else {
    tensor_description_ = nullptr;
  }
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocation_type_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(allocation_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeOutput)
}

void NodeOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_description_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allocation_type_) -
    reinterpret_cast<char*>(&tensor_description_)) + sizeof(allocation_type_));
}

NodeOutput::~NodeOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tensor_description_;
}

void NodeOutput::ArenaDtor(void* object) {
  NodeOutput* _this = reinterpret_cast< NodeOutput* >(object);
  (void)_this;
}
void NodeOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tensor_description_ != nullptr) {
    delete tensor_description_;
  }
  tensor_description_ = nullptr;
  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocation_type_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(allocation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.AllocationType allocation_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_allocation_type(static_cast<::tensorflow::AllocationType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorDescription tensor_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot = 1;
  if (this->slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  // .tensorflow.AllocationType allocation_type = 2;
  if (this->allocation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_allocation_type(), target);
  }

  // .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tensor_description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeOutput)
  return target;
}

size_t NodeOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_description_);
  }

  // int32 slot = 1;
  if (this->slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }

  // .tensorflow.AllocationType allocation_type = 2;
  if (this->allocation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_allocation_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeOutput)
    MergeFrom(*source);
  }
}

void NodeOutput::MergeFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor_description()) {
    _internal_mutable_tensor_description()->::tensorflow::TensorDescription::MergeFrom(from._internal_tensor_description());
  }
  if (from.slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from.allocation_type() != 0) {
    _internal_set_allocation_type(from._internal_allocation_type());
  }
}

void NodeOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeOutput::CopyFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeOutput::IsInitialized() const {
  return true;
}

void NodeOutput::InternalSwap(NodeOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeOutput, allocation_type_)
      + sizeof(NodeOutput::allocation_type_)
      - PROTOBUF_FIELD_OFFSET(NodeOutput, tensor_description_)>(
          reinterpret_cast<char*>(&tensor_description_),
          reinterpret_cast<char*>(&other->tensor_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[1]);
}

// ===================================================================

class NodeExecStats::_Internal {
 public:
};

NodeExecStats::NodeExecStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  memory_(arena),
  output_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeExecStats)
}
NodeExecStats::NodeExecStats(const NodeExecStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      memory_(from.memory_),
      output_(from.output_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArena());
  }
  timeline_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timeline_label().empty()) {
    timeline_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeline_label(), 
      GetArena());
  }
  ::memcpy(&all_start_micros_, &from.all_start_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&all_start_micros_)) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeExecStats)
}

void NodeExecStats::SharedCtor() {
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timeline_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&all_start_micros_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&all_start_micros_)) + sizeof(thread_id_));
}

NodeExecStats::~NodeExecStats() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeExecStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeExecStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeline_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeExecStats::ArenaDtor(void* object) {
  NodeExecStats* _this = reinterpret_cast< NodeExecStats* >(object);
  (void)_this;
}
void NodeExecStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeExecStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memory_.Clear();
  output_.Clear();
  node_name_.ClearToEmpty();
  timeline_label_.ClearToEmpty();
  ::memset(&all_start_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&all_start_micros_)) + sizeof(thread_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeExecStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.NodeExecStats.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 all_start_micros = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_start_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_start_rel_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          op_start_rel_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_end_rel_micros = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          op_end_rel_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 all_end_rel_micros = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          all_end_rel_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.NodeOutput output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string timeline_label = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_timeline_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.NodeExecStats.timeline_label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 scheduled_micros = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          scheduled_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thread_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeExecStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeExecStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_all_start_micros(), target);
  }

  // int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_op_start_rel_micros(), target);
  }

  // int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_op_end_rel_micros(), target);
  }

  // int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_all_end_rel_micros(), target);
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_memory(i), target, stream);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_output(i), target, stream);
  }

  // string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeline_label().data(), static_cast<int>(this->_internal_timeline_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.timeline_label");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_timeline_label(), target);
  }

  // int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_scheduled_micros(), target);
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_thread_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeExecStats)
  return target;
}

size_t NodeExecStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeExecStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  total_size += 1UL * this->_internal_memory_size();
  for (const auto& msg : this->memory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->output_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeline_label());
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_all_start_micros());
  }

  // int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_start_rel_micros());
  }

  // int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_end_rel_micros());
  }

  // int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_all_end_rel_micros());
  }

  // int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_scheduled_micros());
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thread_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeExecStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeExecStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeExecStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeExecStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeExecStats)
    MergeFrom(*source);
  }
}

void NodeExecStats::MergeFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeExecStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memory_.MergeFrom(from.memory_);
  output_.MergeFrom(from.output_);
  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.timeline_label().size() > 0) {
    _internal_set_timeline_label(from._internal_timeline_label());
  }
  if (from.all_start_micros() != 0) {
    _internal_set_all_start_micros(from._internal_all_start_micros());
  }
  if (from.op_start_rel_micros() != 0) {
    _internal_set_op_start_rel_micros(from._internal_op_start_rel_micros());
  }
  if (from.op_end_rel_micros() != 0) {
    _internal_set_op_end_rel_micros(from._internal_op_end_rel_micros());
  }
  if (from.all_end_rel_micros() != 0) {
    _internal_set_all_end_rel_micros(from._internal_all_end_rel_micros());
  }
  if (from.scheduled_micros() != 0) {
    _internal_set_scheduled_micros(from._internal_scheduled_micros());
  }
  if (from.thread_id() != 0) {
    _internal_set_thread_id(from._internal_thread_id());
  }
}

void NodeExecStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecStats::CopyFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecStats::IsInitialized() const {
  return true;
}

void NodeExecStats::InternalSwap(NodeExecStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  memory_.InternalSwap(&other->memory_);
  output_.InternalSwap(&other->output_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeline_label_.Swap(&other->timeline_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeExecStats, thread_id_)
      + sizeof(NodeExecStats::thread_id_)
      - PROTOBUF_FIELD_OFFSET(NodeExecStats, all_start_micros_)>(
          reinterpret_cast<char*>(&all_start_micros_),
          reinterpret_cast<char*>(&other->all_start_micros_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[2]);
}

// ===================================================================

class DeviceStepStats::_Internal {
 public:
};

DeviceStepStats::DeviceStepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceStepStats)
}
DeviceStepStats::DeviceStepStats(const DeviceStepStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_stats_(from.node_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceStepStats)
}

void DeviceStepStats::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceStepStats::~DeviceStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceStepStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceStepStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStepStats::ArenaDtor(void* object) {
  DeviceStepStats* _this = reinterpret_cast< DeviceStepStats* >(object);
  (void)_this;
}
void DeviceStepStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStepStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceStepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_stats_.Clear();
  device_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStepStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DeviceStepStats.device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.NodeExecStats node_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStepStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceStepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceStepStats.device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_node_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceStepStats)
  return target;
}

size_t DeviceStepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceStepStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  total_size += 1UL * this->_internal_node_stats_size();
  for (const auto& msg : this->node_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStepStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStepStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStepStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceStepStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceStepStats)
    MergeFrom(*source);
  }
}

void DeviceStepStats::MergeFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_stats_.MergeFrom(from.node_stats_);
  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
}

void DeviceStepStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStepStats::CopyFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStepStats::IsInitialized() const {
  return true;
}

void DeviceStepStats::InternalSwap(DeviceStepStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_stats_.InternalSwap(&other->node_stats_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStepStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[3]);
}

// ===================================================================

class StepStats::_Internal {
 public:
};

StepStats::StepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dev_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StepStats)
}
StepStats::StepStats(const StepStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dev_stats_(from.dev_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.StepStats)
}

void StepStats::SharedCtor() {
}

StepStats::~StepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.StepStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StepStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StepStats::ArenaDtor(void* object) {
  StepStats* _this = reinterpret_cast< StepStats* >(object);
  (void)_this;
}
void StepStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceStepStats dev_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dev_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StepStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StepStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dev_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dev_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StepStats)
  return target;
}

size_t StepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StepStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  total_size += 1UL * this->_internal_dev_stats_size();
  for (const auto& msg : this->dev_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StepStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StepStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StepStats)
    MergeFrom(*source);
  }
}

void StepStats::MergeFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dev_stats_.MergeFrom(from.dev_stats_);
}

void StepStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepStats::CopyFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepStats::IsInitialized() const {
  return true;
}

void StepStats::InternalSwap(StepStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_stats_.InternalSwap(&other->dev_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::AllocatorMemoryUsed* Arena::CreateMaybeMessage< ::tensorflow::AllocatorMemoryUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AllocatorMemoryUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NodeOutput* Arena::CreateMaybeMessage< ::tensorflow::NodeOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NodeOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NodeExecStats* Arena::CreateMaybeMessage< ::tensorflow::NodeExecStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NodeExecStats >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceStepStats* Arena::CreateMaybeMessage< ::tensorflow::DeviceStepStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceStepStats >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::StepStats* Arena::CreateMaybeMessage< ::tensorflow::StepStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::StepStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
