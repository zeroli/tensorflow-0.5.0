// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/summary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fsummary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fsummary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fsummary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto;
namespace tensorflow {
class HistogramProto;
struct HistogramProtoDefaultTypeInternal;
extern HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
class Summary;
struct SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class Summary_Image;
struct Summary_ImageDefaultTypeInternal;
extern Summary_ImageDefaultTypeInternal _Summary_Image_default_instance_;
class Summary_Value;
struct Summary_ValueDefaultTypeInternal;
extern Summary_ValueDefaultTypeInternal _Summary_Value_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::HistogramProto* Arena::CreateMaybeMessage<::tensorflow::HistogramProto>(Arena*);
template<> ::tensorflow::Summary* Arena::CreateMaybeMessage<::tensorflow::Summary>(Arena*);
template<> ::tensorflow::Summary_Image* Arena::CreateMaybeMessage<::tensorflow::Summary_Image>(Arena*);
template<> ::tensorflow::Summary_Value* Arena::CreateMaybeMessage<::tensorflow::Summary_Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class HistogramProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.HistogramProto) */ {
 public:
  inline HistogramProto() : HistogramProto(nullptr) {}
  ~HistogramProto() override;
  explicit constexpr HistogramProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistogramProto(const HistogramProto& from);
  HistogramProto(HistogramProto&& from) noexcept
    : HistogramProto() {
    *this = ::std::move(from);
  }

  inline HistogramProto& operator=(const HistogramProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramProto& operator=(HistogramProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistogramProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramProto* internal_default_instance() {
    return reinterpret_cast<const HistogramProto*>(
               &_HistogramProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HistogramProto& a, HistogramProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramProto* New() const final {
    return CreateMaybeMessage<HistogramProto>(nullptr);
  }

  HistogramProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramProto& from);
  void MergeFrom(const HistogramProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.HistogramProto";
  }
  protected:
  explicit HistogramProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketLimitFieldNumber = 6,
    kBucketFieldNumber = 7,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kNumFieldNumber = 3,
    kSumFieldNumber = 4,
    kSumSquaresFieldNumber = 5,
  };
  // repeated double bucket_limit = 6 [packed = true];
  int bucket_limit_size() const;
  private:
  int _internal_bucket_limit_size() const;
  public:
  void clear_bucket_limit();
  private:
  double _internal_bucket_limit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bucket_limit() const;
  void _internal_add_bucket_limit(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bucket_limit();
  public:
  double bucket_limit(int index) const;
  void set_bucket_limit(int index, double value);
  void add_bucket_limit(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bucket_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bucket_limit();

  // repeated double bucket = 7 [packed = true];
  int bucket_size() const;
  private:
  int _internal_bucket_size() const;
  public:
  void clear_bucket();
  private:
  double _internal_bucket(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bucket() const;
  void _internal_add_bucket(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bucket();
  public:
  double bucket(int index) const;
  void set_bucket(int index, double value);
  void add_bucket(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bucket() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bucket();

  // double min = 1;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 2;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // double num = 3;
  void clear_num();
  double num() const;
  void set_num(double value);
  private:
  double _internal_num() const;
  void _internal_set_num(double value);
  public:

  // double sum = 4;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // double sum_squares = 5;
  void clear_sum_squares();
  double sum_squares() const;
  void set_sum_squares(double value);
  private:
  double _internal_sum_squares() const;
  void _internal_set_sum_squares(double value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.HistogramProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bucket_limit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bucket_;
  double min_;
  double max_;
  double num_;
  double sum_;
  double sum_squares_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.Summary.Image) */ {
 public:
  inline Summary_Image() : Summary_Image(nullptr) {}
  ~Summary_Image() override;
  explicit constexpr Summary_Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Summary_Image(const Summary_Image& from);
  Summary_Image(Summary_Image&& from) noexcept
    : Summary_Image() {
    *this = ::std::move(from);
  }

  inline Summary_Image& operator=(const Summary_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Image& operator=(Summary_Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Summary_Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Summary_Image* internal_default_instance() {
    return reinterpret_cast<const Summary_Image*>(
               &_Summary_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Summary_Image& a, Summary_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Image* New() const final {
    return CreateMaybeMessage<Summary_Image>(nullptr);
  }

  Summary_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Image& from);
  void MergeFrom(const Summary_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.Summary.Image";
  }
  protected:
  explicit Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedImageStringFieldNumber = 4,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kColorspaceFieldNumber = 3,
  };
  // bytes encoded_image_string = 4;
  void clear_encoded_image_string();
  const std::string& encoded_image_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_image_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_image_string();
  std::string* release_encoded_image_string();
  void set_allocated_encoded_image_string(std::string* encoded_image_string);
  private:
  const std::string& _internal_encoded_image_string() const;
  void _internal_set_encoded_image_string(const std::string& value);
  std::string* _internal_mutable_encoded_image_string();
  public:

  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 colorspace = 3;
  void clear_colorspace();
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace() const;
  void set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colorspace() const;
  void _internal_set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.Summary.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_image_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.Summary.Value) */ {
 public:
  inline Summary_Value() : Summary_Value(nullptr) {}
  ~Summary_Value() override;
  explicit constexpr Summary_Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Summary_Value(const Summary_Value& from);
  Summary_Value(Summary_Value&& from) noexcept
    : Summary_Value() {
    *this = ::std::move(from);
  }

  inline Summary_Value& operator=(const Summary_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Value& operator=(Summary_Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Summary_Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kSimpleValue = 2,
    kObsoleteOldStyleHistogram = 3,
    kImage = 4,
    kHisto = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const Summary_Value* internal_default_instance() {
    return reinterpret_cast<const Summary_Value*>(
               &_Summary_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Summary_Value& a, Summary_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Value* New() const final {
    return CreateMaybeMessage<Summary_Value>(nullptr);
  }

  Summary_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Value& from);
  void MergeFrom(const Summary_Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.Summary.Value";
  }
  protected:
  explicit Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kSimpleValueFieldNumber = 2,
    kObsoleteOldStyleHistogramFieldNumber = 3,
    kImageFieldNumber = 4,
    kHistoFieldNumber = 5,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // float simple_value = 2;
  bool has_simple_value() const;
  private:
  bool _internal_has_simple_value() const;
  public:
  void clear_simple_value();
  float simple_value() const;
  void set_simple_value(float value);
  private:
  float _internal_simple_value() const;
  void _internal_set_simple_value(float value);
  public:

  // bytes obsolete_old_style_histogram = 3;
  bool has_obsolete_old_style_histogram() const;
  private:
  bool _internal_has_obsolete_old_style_histogram() const;
  public:
  void clear_obsolete_old_style_histogram();
  const std::string& obsolete_old_style_histogram() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obsolete_old_style_histogram(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obsolete_old_style_histogram();
  std::string* release_obsolete_old_style_histogram();
  void set_allocated_obsolete_old_style_histogram(std::string* obsolete_old_style_histogram);
  private:
  const std::string& _internal_obsolete_old_style_histogram() const;
  void _internal_set_obsolete_old_style_histogram(const std::string& value);
  std::string* _internal_mutable_obsolete_old_style_histogram();
  public:

  // .tensorflow.Summary.Image image = 4;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::tensorflow::Summary_Image& image() const;
  ::tensorflow::Summary_Image* release_image();
  ::tensorflow::Summary_Image* mutable_image();
  void set_allocated_image(::tensorflow::Summary_Image* image);
  private:
  const ::tensorflow::Summary_Image& _internal_image() const;
  ::tensorflow::Summary_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::tensorflow::Summary_Image* image);
  ::tensorflow::Summary_Image* unsafe_arena_release_image();

  // .tensorflow.HistogramProto histo = 5;
  bool has_histo() const;
  private:
  bool _internal_has_histo() const;
  public:
  void clear_histo();
  const ::tensorflow::HistogramProto& histo() const;
  ::tensorflow::HistogramProto* release_histo();
  ::tensorflow::HistogramProto* mutable_histo();
  void set_allocated_histo(::tensorflow::HistogramProto* histo);
  private:
  const ::tensorflow::HistogramProto& _internal_histo() const;
  ::tensorflow::HistogramProto* _internal_mutable_histo();
  public:
  void unsafe_arena_set_allocated_histo(
      ::tensorflow::HistogramProto* histo);
  ::tensorflow::HistogramProto* unsafe_arena_release_histo();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.Summary.Value)
 private:
  class _Internal;
  void set_has_simple_value();
  void set_has_obsolete_old_style_histogram();
  void set_has_image();
  void set_has_histo();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float simple_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_old_style_histogram_;
    ::tensorflow::Summary_Image* image_;
    ::tensorflow::HistogramProto* histo_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  ~Summary() override;
  explicit constexpr Summary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Summary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Summary_Image Image;
  typedef Summary_Value Value;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .tensorflow.Summary.Value value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::tensorflow::Summary_Value* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Summary_Value >*
      mutable_value();
  private:
  const ::tensorflow::Summary_Value& _internal_value(int index) const;
  ::tensorflow::Summary_Value* _internal_add_value();
  public:
  const ::tensorflow::Summary_Value& value(int index) const;
  ::tensorflow::Summary_Value* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Summary_Value >&
      value() const;

  // @@protoc_insertion_point(class_scope:tensorflow.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Summary_Value > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HistogramProto

// double min = 1;
inline void HistogramProto::clear_min() {
  min_ = 0;
}
inline double HistogramProto::_internal_min() const {
  return min_;
}
inline double HistogramProto::min() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.min)
  return _internal_min();
}
inline void HistogramProto::_internal_set_min(double value) {
  
  min_ = value;
}
inline void HistogramProto::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.min)
}

// double max = 2;
inline void HistogramProto::clear_max() {
  max_ = 0;
}
inline double HistogramProto::_internal_max() const {
  return max_;
}
inline double HistogramProto::max() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.max)
  return _internal_max();
}
inline void HistogramProto::_internal_set_max(double value) {
  
  max_ = value;
}
inline void HistogramProto::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.max)
}

// double num = 3;
inline void HistogramProto::clear_num() {
  num_ = 0;
}
inline double HistogramProto::_internal_num() const {
  return num_;
}
inline double HistogramProto::num() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.num)
  return _internal_num();
}
inline void HistogramProto::_internal_set_num(double value) {
  
  num_ = value;
}
inline void HistogramProto::set_num(double value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.num)
}

// double sum = 4;
inline void HistogramProto::clear_sum() {
  sum_ = 0;
}
inline double HistogramProto::_internal_sum() const {
  return sum_;
}
inline double HistogramProto::sum() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum)
  return _internal_sum();
}
inline void HistogramProto::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void HistogramProto::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum)
}

// double sum_squares = 5;
inline void HistogramProto::clear_sum_squares() {
  sum_squares_ = 0;
}
inline double HistogramProto::_internal_sum_squares() const {
  return sum_squares_;
}
inline double HistogramProto::sum_squares() const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.sum_squares)
  return _internal_sum_squares();
}
inline void HistogramProto::_internal_set_sum_squares(double value) {
  
  sum_squares_ = value;
}
inline void HistogramProto::set_sum_squares(double value) {
  _internal_set_sum_squares(value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.sum_squares)
}

// repeated double bucket_limit = 6 [packed = true];
inline int HistogramProto::_internal_bucket_limit_size() const {
  return bucket_limit_.size();
}
inline int HistogramProto::bucket_limit_size() const {
  return _internal_bucket_limit_size();
}
inline void HistogramProto::clear_bucket_limit() {
  bucket_limit_.Clear();
}
inline double HistogramProto::_internal_bucket_limit(int index) const {
  return bucket_limit_.Get(index);
}
inline double HistogramProto::bucket_limit(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket_limit)
  return _internal_bucket_limit(index);
}
inline void HistogramProto::set_bucket_limit(int index, double value) {
  bucket_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket_limit)
}
inline void HistogramProto::_internal_add_bucket_limit(double value) {
  bucket_limit_.Add(value);
}
inline void HistogramProto::add_bucket_limit(double value) {
  _internal_add_bucket_limit(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket_limit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::_internal_bucket_limit() const {
  return bucket_limit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::bucket_limit() const {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket_limit)
  return _internal_bucket_limit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::_internal_mutable_bucket_limit() {
  return &bucket_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::mutable_bucket_limit() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket_limit)
  return _internal_mutable_bucket_limit();
}

// repeated double bucket = 7 [packed = true];
inline int HistogramProto::_internal_bucket_size() const {
  return bucket_.size();
}
inline int HistogramProto::bucket_size() const {
  return _internal_bucket_size();
}
inline void HistogramProto::clear_bucket() {
  bucket_.Clear();
}
inline double HistogramProto::_internal_bucket(int index) const {
  return bucket_.Get(index);
}
inline double HistogramProto::bucket(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.HistogramProto.bucket)
  return _internal_bucket(index);
}
inline void HistogramProto::set_bucket(int index, double value) {
  bucket_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.HistogramProto.bucket)
}
inline void HistogramProto::_internal_add_bucket(double value) {
  bucket_.Add(value);
}
inline void HistogramProto::add_bucket(double value) {
  _internal_add_bucket(value);
  // @@protoc_insertion_point(field_add:tensorflow.HistogramProto.bucket)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::_internal_bucket() const {
  return bucket_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::bucket() const {
  // @@protoc_insertion_point(field_list:tensorflow.HistogramProto.bucket)
  return _internal_bucket();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::_internal_mutable_bucket() {
  return &bucket_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.HistogramProto.bucket)
  return _internal_mutable_bucket();
}

// -------------------------------------------------------------------

// Summary_Image

// int32 height = 1;
inline void Summary_Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::height() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.height)
  return _internal_height();
}
inline void Summary_Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Summary_Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.height)
}

// int32 width = 2;
inline void Summary_Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::width() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.width)
  return _internal_width();
}
inline void Summary_Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Summary_Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.width)
}

// int32 colorspace = 3;
inline void Summary_Image::clear_colorspace() {
  colorspace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_colorspace() const {
  return colorspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::colorspace() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.colorspace)
  return _internal_colorspace();
}
inline void Summary_Image::_internal_set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colorspace_ = value;
}
inline void Summary_Image::set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colorspace(value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.colorspace)
}

// bytes encoded_image_string = 4;
inline void Summary_Image::clear_encoded_image_string() {
  encoded_image_string_.ClearToEmpty();
}
inline const std::string& Summary_Image::encoded_image_string() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Image.encoded_image_string)
  return _internal_encoded_image_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Summary_Image::set_encoded_image_string(ArgT0&& arg0, ArgT... args) {
 
 encoded_image_string_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Image.encoded_image_string)
}
inline std::string* Summary_Image::mutable_encoded_image_string() {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Image.encoded_image_string)
  return _internal_mutable_encoded_image_string();
}
inline const std::string& Summary_Image::_internal_encoded_image_string() const {
  return encoded_image_string_.Get();
}
inline void Summary_Image::_internal_set_encoded_image_string(const std::string& value) {
  
  encoded_image_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Summary_Image::_internal_mutable_encoded_image_string() {
  
  return encoded_image_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Summary_Image::release_encoded_image_string() {
  // @@protoc_insertion_point(field_release:tensorflow.Summary.Image.encoded_image_string)
  return encoded_image_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Summary_Image::set_allocated_encoded_image_string(std::string* encoded_image_string) {
  if (encoded_image_string != nullptr) {
    
  } else {
    
  }
  encoded_image_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_image_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Image.encoded_image_string)
}

// -------------------------------------------------------------------

// Summary_Value

// string tag = 1;
inline void Summary_Value::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& Summary_Value::tag() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Summary_Value::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.tag)
}
inline std::string* Summary_Value::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.tag)
  return _internal_mutable_tag();
}
inline const std::string& Summary_Value::_internal_tag() const {
  return tag_.Get();
}
inline void Summary_Value::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Summary_Value::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Summary_Value::release_tag() {
  // @@protoc_insertion_point(field_release:tensorflow.Summary.Value.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Summary_Value::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.tag)
}

// float simple_value = 2;
inline bool Summary_Value::_internal_has_simple_value() const {
  return value_case() == kSimpleValue;
}
inline bool Summary_Value::has_simple_value() const {
  return _internal_has_simple_value();
}
inline void Summary_Value::set_has_simple_value() {
  _oneof_case_[0] = kSimpleValue;
}
inline void Summary_Value::clear_simple_value() {
  if (_internal_has_simple_value()) {
    value_.simple_value_ = 0;
    clear_has_value();
  }
}
inline float Summary_Value::_internal_simple_value() const {
  if (_internal_has_simple_value()) {
    return value_.simple_value_;
  }
  return 0;
}
inline void Summary_Value::_internal_set_simple_value(float value) {
  if (!_internal_has_simple_value()) {
    clear_value();
    set_has_simple_value();
  }
  value_.simple_value_ = value;
}
inline float Summary_Value::simple_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.simple_value)
  return _internal_simple_value();
}
inline void Summary_Value::set_simple_value(float value) {
  _internal_set_simple_value(value);
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.simple_value)
}

// bytes obsolete_old_style_histogram = 3;
inline bool Summary_Value::_internal_has_obsolete_old_style_histogram() const {
  return value_case() == kObsoleteOldStyleHistogram;
}
inline bool Summary_Value::has_obsolete_old_style_histogram() const {
  return _internal_has_obsolete_old_style_histogram();
}
inline void Summary_Value::set_has_obsolete_old_style_histogram() {
  _oneof_case_[0] = kObsoleteOldStyleHistogram;
}
inline void Summary_Value::clear_obsolete_old_style_histogram() {
  if (_internal_has_obsolete_old_style_histogram()) {
    value_.obsolete_old_style_histogram_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_value();
  }
}
inline const std::string& Summary_Value::obsolete_old_style_histogram() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.obsolete_old_style_histogram)
  return _internal_obsolete_old_style_histogram();
}
template <typename ArgT0, typename... ArgT>
inline void Summary_Value::set_obsolete_old_style_histogram(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:tensorflow.Summary.Value.obsolete_old_style_histogram)
}
inline std::string* Summary_Value::mutable_obsolete_old_style_histogram() {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.obsolete_old_style_histogram)
  return _internal_mutable_obsolete_old_style_histogram();
}
inline const std::string& Summary_Value::_internal_obsolete_old_style_histogram() const {
  if (_internal_has_obsolete_old_style_histogram()) {
    return value_.obsolete_old_style_histogram_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Summary_Value::_internal_set_obsolete_old_style_histogram(const std::string& value) {
  if (!_internal_has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Summary_Value::_internal_mutable_obsolete_old_style_histogram() {
  if (!_internal_has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.obsolete_old_style_histogram_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Summary_Value::release_obsolete_old_style_histogram() {
  // @@protoc_insertion_point(field_release:tensorflow.Summary.Value.obsolete_old_style_histogram)
  if (_internal_has_obsolete_old_style_histogram()) {
    clear_has_value();
    return value_.obsolete_old_style_histogram_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Summary_Value::set_allocated_obsolete_old_style_histogram(std::string* obsolete_old_style_histogram) {
  if (has_value()) {
    clear_value();
  }
  if (obsolete_old_style_histogram != nullptr) {
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(obsolete_old_style_histogram);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(obsolete_old_style_histogram);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.obsolete_old_style_histogram)
}

// .tensorflow.Summary.Image image = 4;
inline bool Summary_Value::_internal_has_image() const {
  return value_case() == kImage;
}
inline bool Summary_Value::has_image() const {
  return _internal_has_image();
}
inline void Summary_Value::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void Summary_Value::clear_image() {
  if (_internal_has_image()) {
    if (GetArena() == nullptr) {
      delete value_.image_;
    }
    clear_has_value();
  }
}
inline ::tensorflow::Summary_Image* Summary_Value::release_image() {
  // @@protoc_insertion_point(field_release:tensorflow.Summary.Value.image)
  if (_internal_has_image()) {
    clear_has_value();
      ::tensorflow::Summary_Image* temp = value_.image_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::Summary_Image& Summary_Value::_internal_image() const {
  return _internal_has_image()
      ? *value_.image_
      : reinterpret_cast< ::tensorflow::Summary_Image&>(::tensorflow::_Summary_Image_default_instance_);
}
inline const ::tensorflow::Summary_Image& Summary_Value::image() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.image)
  return _internal_image();
}
inline ::tensorflow::Summary_Image* Summary_Value::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Summary.Value.image)
  if (_internal_has_image()) {
    clear_has_value();
    ::tensorflow::Summary_Image* temp = value_.image_;
    value_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_image(::tensorflow::Summary_Image* image) {
  clear_value();
  if (image) {
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Summary.Value.image)
}
inline ::tensorflow::Summary_Image* Summary_Value::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_value();
    set_has_image();
    value_.image_ = CreateMaybeMessage< ::tensorflow::Summary_Image >(GetArena());
  }
  return value_.image_;
}
inline ::tensorflow::Summary_Image* Summary_Value::mutable_image() {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.image)
  return _internal_mutable_image();
}

// .tensorflow.HistogramProto histo = 5;
inline bool Summary_Value::_internal_has_histo() const {
  return value_case() == kHisto;
}
inline bool Summary_Value::has_histo() const {
  return _internal_has_histo();
}
inline void Summary_Value::set_has_histo() {
  _oneof_case_[0] = kHisto;
}
inline void Summary_Value::clear_histo() {
  if (_internal_has_histo()) {
    if (GetArena() == nullptr) {
      delete value_.histo_;
    }
    clear_has_value();
  }
}
inline ::tensorflow::HistogramProto* Summary_Value::release_histo() {
  // @@protoc_insertion_point(field_release:tensorflow.Summary.Value.histo)
  if (_internal_has_histo()) {
    clear_has_value();
      ::tensorflow::HistogramProto* temp = value_.histo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.histo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::HistogramProto& Summary_Value::_internal_histo() const {
  return _internal_has_histo()
      ? *value_.histo_
      : reinterpret_cast< ::tensorflow::HistogramProto&>(::tensorflow::_HistogramProto_default_instance_);
}
inline const ::tensorflow::HistogramProto& Summary_Value::histo() const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.Value.histo)
  return _internal_histo();
}
inline ::tensorflow::HistogramProto* Summary_Value::unsafe_arena_release_histo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.Summary.Value.histo)
  if (_internal_has_histo()) {
    clear_has_value();
    ::tensorflow::HistogramProto* temp = value_.histo_;
    value_.histo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_histo(::tensorflow::HistogramProto* histo) {
  clear_value();
  if (histo) {
    set_has_histo();
    value_.histo_ = histo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.Summary.Value.histo)
}
inline ::tensorflow::HistogramProto* Summary_Value::_internal_mutable_histo() {
  if (!_internal_has_histo()) {
    clear_value();
    set_has_histo();
    value_.histo_ = CreateMaybeMessage< ::tensorflow::HistogramProto >(GetArena());
  }
  return value_.histo_;
}
inline ::tensorflow::HistogramProto* Summary_Value::mutable_histo() {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.Value.histo)
  return _internal_mutable_histo();
}

inline bool Summary_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Summary_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Summary_Value::ValueCase Summary_Value::value_case() const {
  return Summary_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Summary

// repeated .tensorflow.Summary.Value value = 1;
inline int Summary::_internal_value_size() const {
  return value_.size();
}
inline int Summary::value_size() const {
  return _internal_value_size();
}
inline void Summary::clear_value() {
  value_.Clear();
}
inline ::tensorflow::Summary_Value* Summary::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.Summary.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Summary_Value >*
Summary::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.Summary.value)
  return &value_;
}
inline const ::tensorflow::Summary_Value& Summary::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::tensorflow::Summary_Value& Summary::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.Summary.value)
  return _internal_value(index);
}
inline ::tensorflow::Summary_Value* Summary::_internal_add_value() {
  return value_.Add();
}
inline ::tensorflow::Summary_Value* Summary::add_value() {
  // @@protoc_insertion_point(field_add:tensorflow.Summary.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::Summary_Value >&
Summary::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.Summary.value)
  return value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fsummary_2eproto
